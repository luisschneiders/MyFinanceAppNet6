@using MainApp.Components.Badge
@using MainApp.Components.Modal
@using MainApp.Components.Dropdown.MultiSelect

<Modal @ref="_modal"
       Size="Size.Lg"
       ModalBodyStyle="vh-100"
       IsCloseButtonVisible="false">
    <Title>
        <span class="text-secondary">
            @Label.AppApplyFilter
        </span>
    </Title>
    <Body>
        <div class="d-flex">
            <div class="d-flex me-2">
                <DropdownMultiSelect ButtonSize="Size.Sm"
                            DropdownLabel="@Label.FilterByTransactionCategory"
                            DropdownPosition="Position.Start"
                            IconEnd="bi-chevron-down"
                            IconStart="bi-currency-exchange">
                    @foreach (var (transactionCategory, index) in _transactionCategories.Select((value, index) => (value, index)))
                    {
                        <li class="px-2 py-1 dropdown-item rounded">
                            <div class="form-check">
                                <input class="form-check-input" 
                                        type="checkbox"
                                        checked="@transactionCategory.IsChecked"
                                        id="@($"transaction-category{transactionCategory.Id}")"
                                        value="@(transactionCategory.Id)"
                                        @onchange="(e) => OnCheckboxChangedTransaction(e, transactionCategory.Id)" />
                                <label class="form-check-label" for="@($"transaction-category{transactionCategory.Id}")" title="@transactionCategory.Description">
                                    @($"{transactionCategory.Description.Truncate((int)Truncate.TransactionCategory)}")
                                </label>
                            </div>
                        </li>
                    }
                </DropdownMultiSelect>
            </div>
            <div class="d-flex me-2">
                <DropdownMultiSelect ButtonSize="Size.Sm"
                                DropdownLabel="@Label.FilterByBank"
                                DropdownPosition="Position.Start"
                                IconEnd="bi-chevron-down"
                                IconStart="bi-bank2">
                    @foreach (var (bank, index) in _banks.Select((value, index) => (value, index)))
                    {
                        <li class="px-2 py-1 dropdown-item rounded">
                            <div class="form-check">
                                <input class="form-check-input" 
                                        type="checkbox"
                                        checked="@bank.IsChecked"
                                        id="@($"bank-{bank.Id}")"
                                        value="@(bank.Id)"
                                        @onchange="(e) => OnCheckboxChangedBank(e, bank.Id)" />
                                <label class="form-check-label" for="@($"bank-{bank.Id}")" title="@bank.Description">
                                    @($"{bank.Description.Truncate((int)Truncate.Bank)}")
                                </label>
                            </div>
                        </li>
                    }
                </DropdownMultiSelect>
            </div>
        </div>
    </Body>
    <Footer>
        <div class="row">
            <div class="col-auto">
                <button type="button"
                        class="btn btn-@(Size.Sm.ToString().ToLower()) btn-outline-secondary @("rounded"+_appSettings.Button)"
                        data-dismiss="modal"
                        @onclick="() => CloseModalAsync()">
                    Close
                </button>
            </div>
        </div>
    </Footer>
</Modal>
