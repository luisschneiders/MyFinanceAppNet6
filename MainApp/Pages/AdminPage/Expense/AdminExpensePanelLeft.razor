@using MainApp.Components.Accordion
@using MainApp.Components.Badge
@using MainApp.Components.Badge.Color
@using MainApp.Components.Card
@using MainApp.Components.CalendarView
@using MainApp.Components.Dropdown.Actions
@using MainApp.Components.Dropdown.Date
@using MainApp.Components.Dropdown.DateRange
@using MainApp.Components.Dropdown.Filter
@using MainApp.Components.Loader

<CardView Styles="border-0">
    <CardMiddle>
        <div class="row pb-2">
            <div class="col-10 col-lg-9 pb-2 d-flex align-items-center">
                @if (_isLoading)
                {
                    <Loader />
                }
                else
                {
                    <div class="btn-group align-items-center @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                         role="group"
                         aria-label="Radio toggle button group"
                         title="Change view">
                        <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" value="@_viewType" @onclick="() => UpdateUIVIew(ViewType.Calendar)">
                        <label class="btn btn-@(Size.Sm.ToString().ToLower()) btn-outline-@(Theme.Secondary.ToString().ToLower() ) border-@(Theme.Light.ToString().ToLower())-subtle @("rounded-start"+_appSettings.Button) @(_viewType == @ViewType.Calendar.ToString() ? "active" : "")" for="btnradio1"><i class="bi bi-calendar3"></i></label>

                        <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" value="@_viewType" @onclick="() => UpdateUIVIew(ViewType.List)">
                        <label class="btn btn-@(Size.Sm.ToString().ToLower()) btn-outline-@(Theme.Secondary.ToString().ToLower() ) border-@(Theme.Light.ToString().ToLower())-subtle @("rounded-end"+_appSettings.Button) @(_viewType == @ViewType.List.ToString() ? "active" : "")" for="btnradio2"><i class="bi bi-list-ul"></i></label>
                    </div>
                    @if (_viewType == ViewType.Calendar.ToString())
                    {
                        <div class="ps-2">
                            <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-outline-@(Theme.Secondary.ToString().ToLower() ) border-@(Theme.Light.ToString().ToLower())-subtle @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                                    @onclick="() => PreviousPeriodAsync(_dateCalendar)"
                                    title="@Label.AppButtonPrevious"
                                    disabled="@(_isLoadingCalendar ? true : false)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                            <DropdownDateMonthYear 
                                                ButtonSize="Size.Sm"
                                                DateTimeRange="@_dateCalendar"
                                                DropdownLabel="@_dropdownDateCalendarLabel"
                                                OnSubmitSuccess="data => RefreshDropdownDateMonthYear(data)" />
                            <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-outline-@(Theme.Secondary.ToString().ToLower() ) border-@(Theme.Light.ToString().ToLower())-subtle @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                                    @onclick="() => NextPeriodAsync(_dateCalendar)"
                                    title="@Label.AppButtonNext"
                                    disabled="@(_isLoadingCalendar ? true : false)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="ps-2">
                            <DropdownDateRange ButtonSize="Size.Sm"
                                               DateTimeRange="@_dateRange"
                                               DropdownLabel="@_dropdownDateRangeLabel"
                                               PeriodRange="PeriodRange.Month"
                                               OnSubmitSuccess="data => RefreshDropdownDateRange(data)" />
                        </div>
                    }
                    <div class="ps-2 d-none d-lg-flex">
                        <div class="btn-group btn-outline-@(Theme.Secondary.ToString().ToLower()) border border-@(Theme.Light.ToString().ToLower())-subtle @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)" role="group">
                            <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-outline-@(Theme.Secondary.ToString().ToLower()) border-0 @("rounded"+_appSettings.Button)"
                                    @onclick="() => ApplyFiltersAsync()">
                                <i class="bi bi-sliders2 pe-1"></i>@Label.AppButtonFilter
                                @if(IsFilterApplied())
                                {
                                    <sup class="ps-1">
                                        <Badge BackgroundColor="@Theme.Info" Message="@Label.AppApplied" />
                                    </sup>
                                }
                            </button>
                            @if (IsFilterApplied())
                            {
                                <div class="d-flex align-items-center">
                                    <div class="vr my-1 text-@(Theme.Dark.ToString().ToLower())-emphasis"></div>
                                    <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-outline-@(Theme.Light.ToString().ToLower()) border-0 @("rounded"+_appSettings.Button)"
                                            title="@Label.AppButtonRemove"
                                            @onclick="ResetAllFilters">
                                        <i class="bi bi-x-lg text-@(Theme.Secondary.ToString().ToLower())-emphasis"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="col-2 col-lg-3 pb-2 d-flex justify-content-end">
                <div class="d-none d-lg-block">
                    <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-@(Theme.Secondary.ToString().ToLower()) border-@(Theme.Light.ToString().ToLower())-subtle @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                            @onclick="() => AddRecordAsync(DateTime.Now)">
                        <i class="bi bi-plus-lg pe-1"></i>@Label.AppAdminExpenseButtonNew
                    </button>
                </div>
                <div class="d-block d-lg-none">
                    <DropdownActions DropdownPosition="Position.End"
                                     ButtonSize="Size.Sm"
                                     ButtonColor="Theme.Secondary">
                        <li class="p-1">
                            <button class="dropdown-item rounded"
                                    @onclick="() => AddRecordAsync(DateTime.Now)">
                                <i class="bi bi-plus-lg pe-1"></i>@Label.AppAdminExpenseButtonNew
                            </button>
                        </li>
                    </DropdownActions>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="app-page-responsive-height app-calendar-table @(_viewType == ViewType.Calendar.ToString() ? "rounded"+_appSettings.Card : "")">
                    @if (_isLoading)
                    {
                        <Loader />
                    }
                    else
                    {
                        @if (_viewType == ViewType.Calendar.ToString())
                        {
                            <CalendarWrapper CalendarHasSubheader="true">
                                <CalendarSubHeaderView>
                                    <CalendarSubHeaderWrapper>
                                        <div class="d-flex justify-content-end border-bottom px-2">
                                            <div class="d-flex pe-1">
                                                @Label.AppAdminExpensePeriodMessage1<span class="d-none d-lg-block ps-1">@Label.AppAdminExpensePeriodMessage2:</span>
                                            </div>
                                            <span class="app-expense-sum-me fw-semibold px-1 @("rounded"+_appSettings.Button)">
                                                @_expensesTotal.ToString("C")
                                            </span>
                                        </div>
                                    </CalendarSubHeaderWrapper>
                                </CalendarSubHeaderView>
                                <CalendarHeaderView>
                                    <CalendarHeaderWrapper />
                                </CalendarHeaderView>
                                <CalendarBodyView>
                                    <CalendarBodyWrapper>
                                        @if (_isLoadingCalendar)
                                        {
                                            <tr>
                                                <td colspan="7">
                                                    <Loader />
                                                </td>
                                            </tr>
                                        }
                                        else
                                        {
                                            @if (_weeks is not null)
                                            {
                                                @foreach (var week in _weeks)
                                                {
                                                    <tr>
                                                        @foreach (var date in week)
                                                        {
                                                            <td class="@((date.Year == 1 && date.Day == 1) ? $"bg-{Theme.Light.ToString().ToLower()}-subtle" : "app-calendar-cell")">
                                                                @if ((date.Year != 1 && date.Day >= 1))
                                                                {
                                                                    <a role="button" class="btn w-100 h-100 p-0"
                                                                        @onclick="() => ViewExpensesDetailsAsync(date)">
                                                                        <div class="d-flex justify-content-end">
                                                                            <div class="app-calendar-cell-day app-calendar-cell-current-day text-center p-1 fw-bold @($"rounded{_appSettings.Button}") @((DateTime.Now.Day == date.Day && DateTime.Now.Month == _dateCalendar.Start.Month) ?
                                                                                        $"bg-{Theme.Dark.ToString().ToLower()} text-white" : $"bg-{Theme.Light.ToString().ToLower()}")">
                                                                                @(date.Day)
                                                                            </div>
                                                                        </div>
                                                                        @if ((date.Year != 1 && date.Day >= 1))
                                                                        {
                                                                            @foreach(var (item, index) in _expensesCalendarView.Select((value, index) => (value, index)))
                                                                            {
                                                                                if (item.EDate.Day == date.Day)
                                                                                {
                                                                                    <small class="d-block app-calendar-text text-secondary-emphasis" title="@item.ECategoryDescription">
                                                                                        <BadgeColor RGBColor="@item.ECategoryColor"
                                                                                                    Description="@item.Amount.ToString("C")" />
                                                                                    </small>
                                                                                }
                                                                            }
                                                                        }
                                                                    </a>
                                                                }
                                                                else
                                                                {
                                                                    <div class="d-flex justify-content-end">
                                                                        <div class="app-calendar-cell-day text-center p-1">
                                                                            @(string.Empty)
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            }
                                        }
                                    </CalendarBodyWrapper>
                                </CalendarBodyView>
                            </CalendarWrapper>
                        }
                        else
                        {
                            @if (_expensesListView.Count <= 0)
                            {
                                <div class="text-center">
                                    @Label.AppNoRecordFound
                                </div>
                            }
                            else
                            {
                                <div class="accordion d-flex justify-content-between p-2 fw-semibold
                                            bg-@(Theme.Secondary.ToString().ToLower())-subtle">
                                    <div class="d-flex">
                                        @Label.AppAdminExpensePeriodMessage1<span class="d-none d-lg-block ps-1">@Label.AppAdminExpensePeriodMessage2</span>
                                    </div>
                                    <span class="pe-5 app-expense-sum-me">
                                        @_expensesTotal.ToString("C")
                                    </span>
                                </div>
                                <Accordion Id="Expenses">
                                    @foreach (var (record, index) in _expensesListView.Select((value, index) => (value, index)))
                                    {
                                        <AccordionItem>
                                            <AccordionHeader Id="@index.ToString()">
                                                <BadgeColor RGBColor="@record.Color"
                                                            Description="@record.Description" />
                                                <div>
                                                    <Badge BackgroundColor="@Theme.Light" Message="@record.Total.ToString("C")" />
                                                </div>
                                            </AccordionHeader>
                                            <AccordionBody Id="@index.ToString()">
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                        <thead>
                                                            <tr>
                                                                <th class="col-1">
                                                                    @Label.AppAdminExpenseFieldDate
                                                                </th>
                                                                <th class="col-3">
                                                                    @Label.AppAdminExpenseFieldFinancialInstitution
                                                                </th>
                                                                <th class="col-4">
                                                                    @Label.AppAdminExpenseFieldComments
                                                                </th>
                                                                <th class="col-2 text-end">
                                                                    @Label.AppAdminExpenseFieldTaxAmount
                                                                </th>
                                                                <th class="col-2 text-end">
                                                                    @Label.AppAdminExpenseFieldAmount
                                                                </th>
                                                                <th class="text-center">
                                                                    @Label.AppActions
                                                                </th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @if (_expensesListView.Count <= 0)
                                                            {
                                                                <tr class="bg-light-subtle">
                                                                    <td class="text-center" colspan="5">
                                                                        <div>
                                                                            @Label.AppNoRecordFound
                                                                        </div>
                                                                    </td>
                                                                </tr>
                                                            }
                                                            else
                                                            {
                                                                foreach (var record in _expensesListView[index].Expenses)
                                                                {
                                                                    <tr class="bg-light-subtle">
                                                                        <td>
                                                                            @record.EDate.ToString("dd/MM/yy")
                                                                        </td>
                                                                        <td>
                                                                            @record.BankDescription
                                                                        </td>
                                                                        <td>
                                                                            @record.Comments
                                                                        </td>
                                                                        <td class="text-end">
                                                                            @record.TaxAmount.ToString("C")
                                                                        </td>
                                                                        <td class="text-end">
                                                                            @record.Amount.ToString("C")
                                                                        </td>
                                                                        <td class="text-center">
                                                                            <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-@(Theme.Danger.ToString().ToLower()) @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                                                                                    type="button"
                                                                                    title="@Label.AppButtonArchive"
                                                                                    @onclick="() => ArchiveRecordAsync(record)">
                                                                                <i class="bi bi-archive"></i>
                                                                            </button>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </AccordionBody>
                                        </AccordionItem>
                                    }
                                </Accordion>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </CardMiddle>
</CardView>
<AdminExpenseOffCanvas @ref="_setupOffCanvas" OnSubmitSuccess="RefreshList" />
<AdminExpenseModal @ref="_setupModal" OnSubmitSuccess="RefreshList" />
<AdminExpenseModalDetails @ref="_setupExpenseModalDetails" OnSubmitSuccess="dateTime => OpenSetupOffCanvas(dateTime)" />
<AdminExpenseModalFilter @ref="_setupFilterModal" OnSubmitFilterSuccess="filterExpense => RefreshFilterList(filterExpense)" />
