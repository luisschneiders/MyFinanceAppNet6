@using MainApp.Components.Badge
@using MainApp.Components.Dropdown.Actions
@using MainApp.Components.Loader
@using MainApp.Components.OffCanvas

<OffCanvas @ref="_offCanvasService.OffCanvas" PositionX="Position.End">
    <EditForm Model="@_timesheetModel"
              OnValidSubmit="@HandleValidSubmitAsync"
              OnInvalidSubmit="@HandleInvalidSubmitAsync"
              autocomplete="off">
        <DataAnnotationsValidator />
        <div class="row align-items-center">
            <div class="col my-4">
                <Badge BackgroundColor="@_offCanvasService.GetOffCanvasBadge()" Message="@($"{_offCanvasService.GetOffCanvasViewType()}ing {Label.AppMenuAdminTimesheet}...")" />
            </div>
            @if (_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                   _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit)
            {
                <div class="col my-4 d-flex justify-content-end">
                    <DropdownActions ButtonColor="Theme.Danger">
                        <li class="px-2">
                            <button class="dropdown-item rounded text-@(Theme.Danger.ToString().ToLower())-emphasis"
                                    @onclick="ArchiveAsync">
                                <i class="bi bi-archive pe-1"></i>@Label.AppButtonArchive
                            </button>
                        </li>
                    </DropdownActions>
                </div>
            }
        </div>
        @if (_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View)
        {
            <div class="row">
                <div class="col-sm-12">
                    <button class="btn btn-primary w-100 @("rounded"+_appSettings.Button)"
                            type="button"
                            @onclick="UpdateFormStateAsync">
                        @Label.AppButtonEdit
                    </button>
                </div>
            </div>
            <div class="py-3">
                <hr />
            </div>
        }
        <div class="row pb-4">
            <div class="col-12">
                <div class="form-floating pb-2">
                    @if (_isLoading)
                    {
                        <Loader />
                    }
                    else
                    {
                        <InputSelect id="CompanyId"
                                     @attributes="_inputFormAttributes.Select"
                                     disabled="@((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                               _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive ||
                                               _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit ) ? true: false)"
                                     @oninput="OnValueChanged"
                                     @bind-Value="_timesheetModel.CompanyId">
                            <option value="0">@Label.AppFieldSelect</option>
                            @foreach (var (company, index) in _activeCompanies.Select((value, index) => (value, index)))
                            {
                                <option value="@company.Id"> @($"{company.Description}") </option>
                            }
                        </InputSelect>
                        <label for="CompanyId">@Label.AppAdminTimesheetCompany</label>
                    }
                </div>
                <div class="form-floating pb-2">
                    <InputDate id="TimeIn"
                               @attributes="((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                            _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive ||
                                            _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit) ? _inputFormAttributes.PlainText : _inputFormAttributes.Control)"
                               placeholder="@Label.AppAdminTimesheetClockIn"
                               readonly="@((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                           _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive ||
                                           _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit) ? true: false)"
                               @bind-Value="_timesheetModel.TimeIn"
                               Type="InputDateType.DateTimeLocal" />
                    <label for="TimeIn">@Label.AppAdminTimesheetClockIn</label>
                </div>
                <div class="form-floating pb-2">
                    <InputNumber id="TimeBreak"
                                 @attributes="((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                              _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive ||
                                              _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit) ? _inputFormAttributes.PlainText : _inputFormAttributes.Control)"
                                 placeholder="@Label.AppAdminTimesheetBreak"
                                 min="0"
                                 max="60"
                                 readonly="@((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                             _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive ||
                                             _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit ) ? true: false)"
                                 @bind-Value="_timesheetModel.TimeBreak" />
                    <label for="TimeBreak">@Label.AppAdminTimesheetBreak</label>
                </div>
                <div class="form-floating pb-2">
                    <InputDate id="TimeOut"
                               @attributes="((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                            _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive ||
                                            _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit) ? _inputFormAttributes.PlainText : _inputFormAttributes.Control)"
                               placeholder="@Label.AppAdminTimesheetClockOut"
                               readonly="@((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                           _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive ||
                                           _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit) ? true: false)"
                               @bind-Value="_timesheetModel.TimeOut"
                               Type="InputDateType.DateTimeLocal" />
                    <label for="TimeOut">@Label.AppAdminTimesheetClockOut</label>
                </div>
                <div class="form-floating pb-4">
                    <InputText id="@Label.AppAdminTimesheetComments"
                               @attributes="@((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                          _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive) ? _inputFormAttributes.PlainText : _inputFormAttributes.Control)"
                               placeholder="Comments"
                               readonly="@((_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.View ||
                                           _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Archive) ? true: false)"
                               @bind-Value="_timesheetModel.Comments" />
                    <label for="Comments">@Label.AppAdminTimesheetComments</label>
                </div>
                @if (_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Add)
                {
                    <div class="form-check form-switch form-check-reverse d-flex justify-content-start">
                        <label class="form-check-label pe-2" for="IsDifferentRate">@Label.AppAdminTimesheetPH</label>
                        <InputCheckbox class="form-check-input"
                                       type="checkbox"
                                       role="switch"
                                       id="IsDifferentRate"
                                       @bind-Value="_isDifferentRate" />
                    </div>
                    if (_isDifferentRate)
                    {
                        <div class="form-floating mb-3">
                            <InputNumber id="HourRate"
                                         @attributes="_inputFormAttributes.Control"
                                         min="0"
                                         placeholder="@Label.AppAdminTimesheetHourRate"
                                         @bind-Value="_timesheetModel.HourRate" />
                            <label for="HourRate">@Label.AppAdminTimesheetHourRate</label>
                        </div>
                    }
                }

                @if (_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit)
                {
                    <div class="form-check form-switch form-check-reverse d-flex justify-content-start">
                        <label class="form-check-label pe-2" for="IsActive">@Label.AppButtonActive</label>
                        <InputCheckbox class="form-check-input"
                                        type="checkbox"
                                        role="switch"
                                        id="IsActive"
                                        @bind-Value="_timesheetModel.IsActive" />
                    </div>
                }
            </div>
        </div>
        @if (_offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Add ||
               _offCanvasService.GetOffCanvasViewType() == OffCanvasViewType.Edit)
        {
            @if (_displayErrorMessages)
            {
                <div class="row">
                    <div class="col-12">
                        <ValidationSummary />
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-6">
                    <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-outline-secondary w-100 @("rounded"+_appSettings.Button)"
                            @onclick="() => CloseOffCanvasAsync()">
                        @Label.AppButtonCancel
                    </button>
                </div>
                <div class="col-6">
                    <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-primary w-100 @("rounded"+_appSettings.Button)"
                            disabled="@(_isProcessing ? true : false)"
                            type="submit">
                        @(_isProcessing ? Label.AppButtonSaving : Label.AppButtonSave)
                    </button>
                </div>
            </div>
        }
    </EditForm>
</OffCanvas>
