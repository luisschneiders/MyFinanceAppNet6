@using MainApp.Components.Badge
@using MainApp.Components.Card
@using MainApp.Components.Dropdown.Actions
@using MainApp.Components.Dropdown.DateRange
@using MainApp.Components.Dropdown.Filter
@using MainApp.Components.Spinner

<CardView Styles="border-0">
    <CardMiddle>
        <div class="row justify-content-between pb-2">
            <div class="col-10 col-lg-8 pb-2 d-flex">
                <DropdownDateRange IconColor="Theme.Primary"
                                   ButtonSize="Size.Md"
                                   ButtonColor="Theme.Info"
                                   DropdownBackground="Theme.Info"
                                   DateTimeRange="@_dateTimeRange"
                                   DropdownLabel="@_dropdownDateRangeLabel"
                                   PeriodRange="PeriodRange.Month"
                                   OnSubmitSuccess="data => DropdownDateRangeRefresh(data)" />
                <div class="ps-2 d-none d-lg-flex">
                    <DropdownFilter ButtonSize="Size.Md"
                                    ButtonColor="Theme.Info"
                                    DropdownLabel="@_dropdownFilterLabel"
                                    DropdownPosition="Position.Start"
                                    DropdownBackground="Theme.Info"
                                    IconEnd="bi-chevron-down"
                                    IconStart="bi-building"
                                    IconStartColor="Theme.Primary"
                                    Model="@_filterModel"
                                    OnSubmitSuccess="DropdownFilterReset">
                        @foreach (var (company, index) in _companies.Select((value, index) => (value, index)))
                        {
                            <li class="px-2">
                                <button class="dropdown-item text-@(Theme.Info.ToString().ToLower())-emphasis"
                                        @onclick="() => DropdownFilterRefreshCompany(company.Id)">
                                    @($"{company.Description.Truncate((int)Truncate.Company)}")
                                </button>
                            </li>
                        }
                    </DropdownFilter>
                </div>
            </div>
            <div class="col-2 col-lg-4 d-flex justify-content-end pb-2">
                <div class="d-none d-lg-block">
                    <button class="btn btn-md bg-@(Theme.Primary.ToString().ToLower())-subtle text-@(Theme.Primary.ToString().ToLower())-emphasis"
                            @onclick="() => AddRecordAsync()">
                        <i class="bi bi-plus-lg pe-1"></i>New timesheet
                    </button>
                </div>
                <div class="d-block d-lg-none">
                    <DropdownActions ButtonColor="Theme.Primary"
                                     DropdownPosition="Position.End">
                        <li class="px-2 d-block d-lg-none">
                            <button class="dropdown-item text-@(Theme.Primary.ToString().ToLower())-emphasis"
                                    @onclick="() => AddRecordAsync()">
                                <i class="bi bi-plus-lg pe-1"></i>New timesheet
                            </button>
                        </li>
                    </DropdownActions>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="table-responsive app-page-responsive-height">
                    <table class="table table-hover">
                        <thead class="app-table-head-vertical-align-top">
                            <tr>
                                <th class="col-3 text-nowrap">
                                    Company
                                </th>
                                <th class="col text-nowrap">
                                    Date
                                </th>
                                <th class="col text-nowrap">
                                    Clock in
                                </th>
                                <th class="col text-nowrap">
                                    Break
                                </th>
                                <th class="col text-nowrap">
                                    Clock out
                                </th>
                                <th class="col text-nowrap">
                                    Hours worked
                                </th>
                                <th class="col text-nowrap text-end">
                                    Total
                                </th>
                                <th class="col text-nowrap" colspan="2">
                                    Pay Status
                                </th>
                                <th class="col text-nowrap">
                                    Comments
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (_isLoading)
                            {
                                <tr>
                                    <td class="text-center" colspan="10">
                                        <div>
                                            <Spinner Size="Size.Sm" />
                                            <span>
                                                Loading ...
                                            </span>
                                        </div>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                @if (_timesheetStateContainerDTO.Timesheets.Count <= 0)
                                {
                                    <tr>
                                        <td class="text-center" colspan="10">
                                            <div>
                                                Not record found!
                                            </div>
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    foreach (var record in _timesheetStateContainerDTO.Timesheets)
                                    {

                                        <tr class="@(record.IsActive == false ? "text-secondary text-opacity-25" : "" )">
                                            <td class="text-nowrap">
                                                @record.Description.Truncate((int)Truncate.Company)
                                            </td>
                                            <td class="text-nowrap">
                                                @record.TimeIn.ToString("dd/MM/yy")
                                            </td>
                                            <td class="text-nowrap">
                                                @record.TimeIn.ToString("t")
                                            </td>
                                            <td class="text-nowrap">
                                                @($"{record.TimeBreak}m")
                                            </td>
                                            <td class="text-nowrap">
                                                @record.TimeOut.ToString("t")
                                            </td>
                                            <td class="text-nowrap">
                                                @record.HoursWorked.ToString("h'h 'm'm '")
                                                @if (record.IsActive == false)
                                                {
                                                    <sup class="text-uppercase">
                                                        <Badge BackgroundColor="Theme.Info" Message="Inactive" />
                                                    </sup>
                                                }
                                            </td>
                                            <td class="text-nowrap text-end">
                                                @record.TotalAmount.ToString("C")
                                            </td>
                                            <td class="text-nowrap">
                                                <DropdownActions Title="@UpdatePayStatusTitle(record.PayStatus)"
                                                                 ButtonSize="Size.Sm"
                                                                 IconEnd="bi-chevron-down"
                                                                 DropdownBackground="Theme.Light"
                                                                 ButtonColor="@UpdatePayStatusButton(record.PayStatus)">
                                                    @foreach (var (status, index) in _payStatuses.Select((value, index) => (value, index)))
                                                    {
                                                        int statusValue = index;

                                                        <li class="px-2">
                                                            <button class="dropdown-item"
                                                                    @onclick="() => UpdatePayStatusAsync(record, statusValue)">
                                                                @($"{status}")
                                                            </button>
                                                        </li>
                                                    }
                                                </DropdownActions>
                                            </td>
                                            <td class="text-center">
                                                <button class="btn btn-link p-0 text-danger"
                                                        type="button"
                                                        title="Edit"
                                                        @onclick="() => EditRecordAsync(record)">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                            </td>
                                            <td class="text-nowrap">
                                                @record.Comments
                                            </td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                        <tfoot class="bg-primary-subtle text-primary-emphasis fw-semibold d-lg-none">
                            <tr>
                                <td class="text-nowrap" colspan="6">Total paid</td>
                                <td class="text-nowrap text-end">@_timesheetStateContainerDTO.TotalPaid.ToString("C")</td>
                                <td colspan="3"></td>
                            </tr>
                            <tr>
                                <td class="text-nowrap" colspan="6">Total awaiting</td>
                                <td class="text-nowrap text-end text-danger-emphasis">@_timesheetStateContainerDTO.TotalAwaiting.ToString("C")</td>
                                <td colspan="3"></td>
                            </tr>
                            <tr>
                                <td class="text-nowrap" colspan="6">Hours worked</td>
                                <td class="text-nowrap text-end">@_timesheetStateContainerDTO.TotalHours</td>
                                <td colspan="3"></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </CardMiddle>
</CardView>
<AdminTimesheetOffCanvas @ref="_setupOffCanvas" OnSubmitSuccess="RefreshList" />

