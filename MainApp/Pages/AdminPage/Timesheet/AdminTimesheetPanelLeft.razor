@using MainApp.Components.Accordion
@using MainApp.Components.Badge
@using MainApp.Components.Badge.Color
@using MainApp.Components.Card
@using MainApp.Components.CalendarView
@using MainApp.Components.Dropdown.Actions
@using MainApp.Components.Dropdown.Date
@using MainApp.Components.Dropdown.DateRange
@using MainApp.Components.Dropdown.Filter
@using MainApp.Components.Dropdown.MultiSelect
@using MainApp.Components.Loader

<CardView Styles="border-0">
    <CardMiddle>
        <div class="row pb-2">
            <div class="col-10 col-lg-9 pb-2 d-flex align-items-center">
                @if (_isLoading)
                {
                    <Loader />
                }
                else
                {
                    <div class="btn-group align-items-center @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                         role="group"
                         aria-label="Radio toggle button group"
                         title="Change view">
                        <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" value="@_viewType" @onclick="() => UpdateUIVIew(ViewType.Calendar)">
                        <label class="btn btn-@(Size.Sm.ToString().ToLower()) btn-@(Theme.Light.ToString().ToLower() ) border-0 @("rounded-start"+_appSettings.Button) @(_viewType == @ViewType.Calendar.ToString() ? "active" : "")" for="btnradio1"><i class="bi bi-calendar3"></i></label>

                        <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" value="@_viewType" @onclick="() => UpdateUIVIew(ViewType.List)">
                        <label class="btn btn-@(Size.Sm.ToString().ToLower()) btn-@(Theme.Light.ToString().ToLower() ) border-0 @("rounded-end"+_appSettings.Button) @(_viewType == @ViewType.List.ToString() ? "active" : "")" for="btnradio2"><i class="bi bi-list-ul"></i></label>
                    </div>
                    @if (_viewType == ViewType.Calendar.ToString())
                    {
                        <div class="ps-2">
                            <button class="btn btn-@(Size.Sm.ToString().ToLower()) bg-@(Theme.Dark.ToString().ToLower())-subtle text-@(Theme.Dark.ToString().ToLower())-emphasis @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                                    @onclick="() => PreviousPeriodAsync(_dateCalendar)"
                                    title="Previous"
                                    disabled="@(_isLoadingCalendar ? true : false)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                            <DropdownDateMonthYear 
                                                ButtonSize="Size.Sm"
                                                DateTimeRange="@_dateCalendar"
                                                DropdownLabel="@_dropdownDateCalendarLabel"
                                                OnSubmitSuccess="data => RefreshDropdownDateMonthYear(data)" />
                            <button class="btn btn-@(Size.Sm.ToString().ToLower()) bg-@(Theme.Dark.ToString().ToLower())-subtle text-@(Theme.Dark.ToString().ToLower())-emphasis @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                                    @onclick="() => NextPeriodAsync(_dateCalendar)"
                                    title="Next"
                                    disabled="@(_isLoadingCalendar ? true : false)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="ps-2">
                            <DropdownDateRange ButtonSize="Size.Sm"
                                            DateTimeRange="@_dateRange"
                                            DropdownLabel="@_dropdownDateRangeLabel"
                                            PeriodRange="PeriodRange.Month"
                                            OnSubmitSuccess="data => RefreshDropdownDateRange(data)" />
                        </div>
                    }
                    <div class="ps-2 d-none d-lg-flex">
                        <div class="btn-group bg-@(Theme.Dark.ToString().ToLower())-subtle @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)" role="group">
                            <button class="btn btn-@(Size.Sm.ToString().ToLower()) bg-@(Theme.Dark.ToString().ToLower())-subtle text-@(Theme.Dark.ToString().ToLower())-emphasis @("rounded"+_appSettings.Button)"
                                    @onclick="() => ApplyFiltersAsync()">
                                <i class="bi bi-sliders2 pe-1"></i>Filters
                                @if(IsFilterApplied())
                                {
                                    <sup class="ps-1">
                                        <Badge BackgroundColor="@Theme.Light" Message="Applied" />
                                    </sup>
                                }
                            </button>
                            @if (IsFilterApplied())
                            {
                                <div class="d-flex align-items-center">
                                    <div class="vr my-1 text-@(Theme.Dark.ToString().ToLower())-emphasis"></div>
                                    <button class="btn btn-@(Size.Sm.ToString().ToLower())"
                                            title="Remove"
                                            @onclick="ResetAllFilters">
                                        <i class="bi bi-x-circle text-@(Theme.Dark.ToString().ToLower())-emphasis"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                    @if (_viewType == ViewType.List.ToString())
                    {
                        <div class="ps-2 d-none d-lg-flex">
                            <DropdownMultiSelect ButtonSize="Size.Sm"
                                            DropdownLabel="@Label.AppTableColumns"
                                            DropdownPosition="Position.Start"
                                            IconEnd="bi-chevron-down"
                                            IconStart="bi-layout-three-columns">
                                @foreach (var (column, index) in _tableColumns.Select((value, index) => (value, index)))
                                {
                                    <li class="px-2 py-1">
                                        <div class="form-check">
                                            <input class="form-check-input"
                                                    type="checkbox"
                                                    checked="@column.IsChecked"
                                                    disabled="@(column.IsDisabled)"
                                                    id="@($"timesheet-column-{column.Id}")"
                                                    value="@(column.Id)"
                                                    @onchange="(e) => OnCheckboxChangedColumns(e, column.Id)" />
                                            <label class="form-check-label" for="@($"timesheet-column-{column.Id}")" title="@column.Description">
                                                @($"{column.Description.Truncate((int)Truncate.ColumnTimesheet)}")
                                            </label>
                                        </div>
                                    </li>
                                }
                            </DropdownMultiSelect>
                        </div>
                    }
                }
            </div>
            <div class="col-2 col-lg-3 pb-2 d-flex justify-content-end">
                <div class="d-none d-lg-block">
                    <button class="btn btn-@(Size.Sm.ToString().ToLower()) btn-@(Theme.Primary.ToString().ToLower()) @("rounded"+_appSettings.Button) @("shadow"+_appSettings.Shadow)"
                            @onclick="() => AddRecordAsync()">
                        <i class="bi bi-plus-lg pe-1"></i>New timesheet
                    </button>
                </div>
                <div class="d-block d-lg-none">
                    <DropdownActions DropdownPosition="Position.End"
                                     ButtonSize="Size.Sm">
                        <li class="px-2 d-block d-lg-none">
                            <button class="dropdown-item text-@(Theme.Primary.ToString().ToLower())-emphasis rounded"
                                    @onclick="() => AddRecordAsync()">
                                <i class="bi bi-plus-lg pe-1"></i>New timesheet
                            </button>
                        </li>
                    </DropdownActions>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="app-page-responsive-height @(_viewType == ViewType.Calendar.ToString() ? "rounded"+_appSettings.Card : "")">
                    @if (_isLoading)
                    {
                        <Loader />
                    }
                    else
                    {
                        @if (_viewType == ViewType.Calendar.ToString())
                        {
                            <CalendarWrapper CalendarHasSubheader="true">
                                <CalendarSubHeaderView>
                                    <CalendarSubHeaderWrapper>
                                        <div class="d-flex justify-content-end border-bottom px-2">
                                            <div class="d-flex pe-1">
                                                Total<span class="d-none d-lg-block ps-1">amount for the period</span>
                                            </div>
                                            <span class="app-expense-sum-me fw-semibold px-1 text-@(Theme.Info.ToString().ToLower())-emphasis @("rounded"+_appSettings.Button)">
                                                @_timesheetTotal.Amount.ToString("C")
                                            </span>
                                        </div>
                                    </CalendarSubHeaderWrapper>
                                </CalendarSubHeaderView>
                                <CalendarHeaderView>
                                    <CalendarHeaderWrapper />
                                </CalendarHeaderView>
                                <CalendarBodyView>
                                    <CalendarBodyWrapper>
                                        @if (_isLoadingCalendar is true)
                                        {
                                            <tr>
                                                <td colspan="7">
                                                    <Loader />
                                                </td>
                                            </tr>
                                        }
                                        else
                                        {
                                            @if (_weeks is not null)
                                            {
                                                @foreach (var week in _weeks)
                                                {
                                                    <tr>
                                                        @foreach (var date in week)
                                                        {
                                                            <td class="@((date.Year == 1 && date.Day == 1) ? $"bg-{Theme.Light.ToString().ToLower()}-subtle" : "app-calendar-cell")">
                                                                @if ((date.Year != 1 && date.Day >= 1))
                                                                {
                                                                    <div class="d-flex justify-content-end">
                                                                        <div class="app-calendar-cell-day text-center p-1 @((DateTime.Now.Day == date.Day && DateTime.Now.Month == _dateCalendar.Start.Month) ?
                                                                                    $"app-calendar-cell-current-day rounded-circle bg-{Theme.Danger.ToString().ToLower()}-subtle text-{Theme.Danger.ToString().ToLower()}-emphasis" :
                                                                                    "") fw-bold text-secondary-emphasis">
                                                                            @(date.Day)
                                                                        </div>
                                                                    </div>
                                                                    @if ((date.Year != 1 && date.Day >= 1))
                                                                    {
                                                                        @foreach(var (item, index) in _timesheetCalendarView.Select((value, index) => (value, index)))
                                                                        {
                                                                            if (item.TDate.Day == date.Day)
                                                                            {
                                                                                <small class="d-block app-calendar-text text-secondary-emphasis" title="@item.CompanyDescription">
                                                                                    <BadgeColor RGBColor="@($"{(item.PayStatus == 0 ? StatusColor.Awaiting : StatusColor.Paid)}")"
                                                                                                Description="@($"{item.TotalAmount.ToString("C")} ({UpdatePayStatusTitle(item.PayStatus)})" )" />
                                                                                </small>
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    <div class="d-flex justify-content-end">
                                                                        <div class="app-calendar-cell-day text-center p-1">
                                                                            @(string.Empty)
                                                                        </div>
                                                                    </div>
                                                                }
                                                            </td>
                                                        }
                                                    </tr>
                                                }
                                            }
                                        }
                                    </CalendarBodyWrapper>
                                </CalendarBodyView>
                            </CalendarWrapper>
                        }
                        else
                        {
                            @if (_timesheetListView.Count <= 0)
                            {
                                <div class="text-center">
                                    @Label.NoRecordFound
                                </div>
                            }
                            else
                            {
                                <div class="accordion d-flex justify-content-between p-3 fw-semibold
                                            bg-@(Theme.Secondary.ToString().ToLower())-subtle">
                                    <div class="d-flex">
                                        Total<span class="d-none d-lg-block ps-1">amount for the period</span>
                                    </div>
                                    <span class="pe-5 app-trip-sum-me">
                                        @_timesheetTotal.Amount.ToString("C")
                                    </span>
                                </div>
                                <Accordion Id="Timesheets">
                                    @foreach (var (record, index) in _timesheetListView.Select((value, index) => (value, index)))
                                    {
                                        <AccordionItem>
                                            <AccordionHeader Id="@index.ToString()" IsAlwaysOpen=true>
                                                <div>
                                                    @record.Description
                                                </div>
                                                <div>
                                                    <span class="pe-4">
                                                        <Badge BackgroundColor="@Theme.Warning" Message="@FormatTimeSpan(TimeSpan.FromHours(record.TotalWorkHours))" />
                                                    </span>
                                                    <span>
                                                        <Badge BackgroundColor="@Theme.Light" Message="@record.TotalAmount.ToString("C")" />
                                                    </span>
                                                </div>
                                            </AccordionHeader>
                                            <AccordionBody Id="@index.ToString()" IsAlwaysOpen=true>
                                                <div class="table-responsive">
                                                    <table class="table table-hover">
                                                        <thead>
                                                            <tr>
                                                                @foreach (var (column, index) in _tableColumns.Select((value, index) => (value, index)))
                                                                {
                                                                    <th class="@(column.CssClass) @(column.IsChecked ? "":"d-none")" colspan="@(column.Colspan)">
                                                                        @column.Description
                                                                    </th>
                                                                }
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @if (_timesheetListView.Count <= 0)
                                                            {
                                                                <tr class="bg-light-subtle">
                                                                    <td class="text-center" colspan="8">
                                                                        <div>
                                                                            @Label.NoRecordFound
                                                                        </div>
                                                                    </td>
                                                                </tr>
                                                            }
                                                            else{
                                                                foreach (var record in _timesheetListView[index].Timesheets)
                                                                {
                                                                    <tr class="@(record.IsActive == false ? "text-secondary text-opacity-25" : "" )">
                                                                        <td class="text-nowrap @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetDate)!.IsChecked ? "":"d-none")">
                                                                            @record.TimeIn.ToString("ddd, dd/MM/yy")
                                                                        </td>
                                                                        <td class="text-nowrap @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetClockIn)!.IsChecked ? "":"d-none")">
                                                                            @record.TimeIn.ToString("t")
                                                                        </td>
                                                                        <td class="text-nowrap @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetBreak)!.IsChecked ? "":"d-none")">
                                                                            @($"{record.TimeBreak}m")
                                                                        </td>
                                                                        <td class="text-nowrap @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetClockOut)!.IsChecked ? "":"d-none")">
                                                                            @record.TimeOut.ToString("t")
                                                                        </td>
                                                                        <td class="text-nowrap @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetWorkHours)!.IsChecked ? "":"d-none")">
                                                                            @record.HoursWorked.ToString("h'h 'm'm '")
                                                                            @if (record.IsActive == false)
                                                                            {
                                                                                <sup class="text-uppercase">
                                                                                    <Badge BackgroundColor="Theme.Info" Message="Inactive" />
                                                                                </sup>
                                                                            }
                                                                        </td>
                                                                        <td class="@(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetOvertime)!.IsChecked ? "":"d-none")">
                                                                            @record.Overtime.ToString("h'h 'm'm '")
                                                                        </td>
                                                                        <td class="text-nowrap text-end @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetTotal)!.IsChecked ? "":"d-none")">
                                                                            @record.TotalAmount.ToString("C")
                                                                        </td>
                                                                        <td class="text-nowrap @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetPayStatus)!.IsChecked ? "":"d-none")">
                                                                            <DropdownActions Title="@UpdatePayStatusTitle(record.PayStatus)"
                                                                                            ButtonSize="Size.Sm"
                                                                                            IconEnd="bi-chevron-down"
                                                                                            ButtonColor="@UpdatePayStatusButton(record.PayStatus)"
                                                                                            ButtonCssClass="w-100"
                                                                                            ButtonInnerStyles="d-flex justify-content-between">
                                                                                @foreach (var (status, index) in _payStatuses.Select((value, index) => (value, index)))
                                                                                {
                                                                                    int statusValue = index;

                                                                                    <li class="px-2">
                                                                                        <button class="dropdown-item"
                                                                                                @onclick="() => UpdatePayStatusAsync(record, statusValue)">
                                                                                            @($"{status}")
                                                                                        </button>
                                                                                    </li>
                                                                                }
                                                                            </DropdownActions>
                                                                        </td>
                                                                        <td class="text-center @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetEdit)!.IsChecked ? "":"d-none")">
                                                                            <button class="btn btn-link p-0 text-danger"
                                                                                    type="button"
                                                                                    title="Edit"
                                                                                    @onclick="() => EditRecordAsync(record)">
                                                                                <i class="bi bi-pencil"></i>
                                                                            </button>
                                                                        </td>
                                                                        <td class="text-nowrap @(_tableColumns.FirstOrDefault(c => c.Description == Label.TimesheetComments)!.IsChecked ? "":"d-none")">
                                                                            @record.Comments
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </AccordionBody>
                                        </AccordionItem>
                                    }
                                </Accordion>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </CardMiddle>
</CardView>
<AdminTimesheetOffCanvas @ref="_setupOffCanvas" OnSubmitSuccess="RefreshList" />
<AdminTimesheetModalFilter @ref="_setupFilterModal" OnSubmitFilterSuccess="filter => RefreshFilterList(filter)" />
