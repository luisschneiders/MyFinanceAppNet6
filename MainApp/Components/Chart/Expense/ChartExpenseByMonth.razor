@using MainApp.Components.Badge
@using MainApp.Components.Dropdown.DateRange
@using MainApp.Components.Dropdown.MultiSelect
@using MainApp.Components.Loader
@using MainApp.Components.Shared

<SharedHeader Title="Total expense by period"
              Icon="@_chartIcon"
              IconColor="Theme.Info"
              BadgeBackgroundColor="Theme.Danger"
              BadgeTitle="New chart" />
@if (_isLoading)
{
    <Loader />
}
else
{
    <div class="row text-center align-items-center">
        <div class="col-12 d-flex align-items-center">
            <div class="d-flex me-2">
                <DropdownDateRange ButtonSize="Size.Sm"
                                DateTimeRange="@_dateTimeRange"
                                DropdownLabel="@_dropdownLabelDate"
                                PeriodRange="PeriodRange.Year"
                                OnSubmitSuccess="data => DropdownDateRangeRefresh(data)" />

            </div>
            <div class="d-flex bg-@(Theme.Dark.ToString().ToLower())-subtle @("rounded"+_appSettings.Button)">
                <DropdownMultiSelect ButtonSize="Size.Sm"
                                DropdownLabel="@Label.FilterByExpenseCategory"
                                DropdownPosition="Position.Start"
                                IconEnd="bi-chevron-down"
                                IconStart="bi-cart4">
                    @foreach (var (expenseCategory, index) in _expenseCategories.Select((value, index) => (value, index)))
                    {
                        <li class="px-2 py-1">
                            <div class="form-check">
                                <input class="form-check-input" 
                                        type="checkbox"
                                        checked="@expenseCategory.IsChecked"
                                        id="@($"expense-category-{expenseCategory.Id}")"
                                        value="@(expenseCategory.Id)"
                                        @onchange="(e) => OnCheckboxChangedExpense(e, expenseCategory.Id)" />
                                <label class="form-check-label" for="@($"expense-category-{expenseCategory.Id}")" title="@expenseCategory.Description">
                                    @($"{expenseCategory.Description.Truncate((int)Truncate.ExpenseCategory)}")
                                </label>
                            </div>
                        </li>
                    }
                </DropdownMultiSelect>
                @if (_multiFilterExpenseByMonthDTO.ECategoryId.Count > 0)
                {
                    <div class="d-flex align-items-center">
                        <button class="btn btn-@(Size.Sm.ToString().ToLower()) text-@(Theme.Dark.ToString().ToLower())-emphasis"
                                title="Clear filter"
                                @onclick="RemoveDropdownFilterExpenseCategory">
                                <Badge BackgroundColor="@Theme.Light" Message="Clear Filter" />
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
    <Chart Id="ExpenseByMonth"
        Type="@ChartType"
        Data="@(_chartConfigData)"
        OnSubmitSuccess="data => SetChartObjectReference(data)" />
}
